{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/account.service\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\n\nfunction RegisterComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵtext(1, \"Please enter Password \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let RegisterComponent = /*#__PURE__*/(() => {\n  class RegisterComponent {\n    constructor(accountService, toastr) {\n      this.accountService = accountService;\n      this.toastr = toastr;\n      this.cancelRegister = new EventEmitter();\n      this.model = {};\n    }\n\n    ngOnInit() {\n      this.initializeForm();\n    } // tslint:disable-next-line: typedef\n\n\n    initializeForm() {\n      this.registerForm = new FormGroup({\n        username: new FormControl('', Validators.required),\n        password: new FormControl('', [Validators.required, Validators.minLength(4), Validators.maxLength(8)]),\n        confirmPassword: new FormControl('', [Validators.required, this.matchValues('password')])\n      });\n      this.registerForm.controls.password.valueChanges.subscribe(() => {\n        this.registerForm.controls.confirmPassword.updateValueAndValidity();\n      });\n    } // tslint:disable-next-line: typedef\n\n\n    matchValues(matchTo) {\n      return control => {\n        var _a;\n\n        return (control === null || control === void 0 ? void 0 : control.value) === ((_a = control === null || control === void 0 ? void 0 : control.parent) === null || _a === void 0 ? void 0 : _a.controls[matchTo].value) ? null : {\n          isMatching: true\n        };\n      };\n    } // tslint:disable-next-line: typedef\n\n\n    register() {\n      console.log(this.registerForm.value); // this.accountService.register(this.model).subscribe(response => {\n      //   console.log(response);\n      //   this.cancel();\n      // }, error => {\n      //   console.log(error);\n      //   this.toastr.error(error.error);\n      // });\n    } // tslint:disable-next-line: typedef\n\n\n    cancel() {\n      this.cancelRegister.emit(false);\n    }\n\n  }\n\n  RegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n    return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.AccountService), i0.ɵɵdirectiveInject(i2.ToastrService));\n  };\n\n  RegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RegisterComponent,\n    selectors: [[\"app-register\"]],\n    outputs: {\n      cancelRegister: \"cancelRegister\"\n    },\n    decls: 24,\n    vars: 12,\n    consts: [[\"autocomplete\", \"off\", 3, \"formGroup\", \"ngSubmit\"], [1, \"text-center\", \"text-primary\"], [1, \"form-group\"], [\"type\", \"text\", \"formControlName\", \"username\", \"placeholder\", \"Username\", 1, \"form-control\"], [1, \"invalid-feedback\"], [\"type\", \"password\", \"formControlName\", \"password\", \"placeholder\", \"Password\", 1, \"form-control\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"type\", \"password\", \"formControlName\", \"confirmPassword\", \"placeholder\", \"Confirm Password\", 1, \"form-control\"], [1, \"form-group\", \"text-center\"], [\"type\", \"submit\", 1, \"btn\", \"btn-success\", \"mr-2\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", \"mr-2\", 3, \"click\"]],\n    template: function RegisterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.register();\n        });\n        i0.ɵɵelementStart(1, \"h2\", 1);\n        i0.ɵɵtext(2, \"Sign up\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(3, \"hr\");\n        i0.ɵɵelementStart(4, \"div\", 2);\n        i0.ɵɵelement(5, \"input\", 3);\n        i0.ɵɵelementStart(6, \"div\", 4);\n        i0.ɵɵtext(7, \"Please enter username\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 2);\n        i0.ɵɵelement(9, \"input\", 5);\n        i0.ɵɵtemplate(10, RegisterComponent_div_10_Template, 2, 0, \"div\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 2);\n        i0.ɵɵelement(12, \"input\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"div\", 8);\n        i0.ɵɵelementStart(14, \"button\", 9);\n        i0.ɵɵtext(15, \"Register\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"button\", 10);\n        i0.ɵɵlistener(\"click\", function RegisterComponent_Template_button_click_16_listener() {\n          return ctx.cancel();\n        });\n        i0.ɵɵtext(17, \"Cancel\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"p\");\n        i0.ɵɵtext(19);\n        i0.ɵɵpipe(20, \"json\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"p\");\n        i0.ɵɵtext(22);\n        i0.ɵɵpipe(23, \"json\");\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n        i0.ɵɵadvance(5);\n        i0.ɵɵclassProp(\"is-invalid\", ctx.registerForm.get(\"username\").errors && ctx.registerForm.get(\"username\").touched);\n        i0.ɵɵadvance(4);\n        i0.ɵɵclassProp(\"is-invalid\", ctx.registerForm.get(\"password\").errors && ctx.registerForm.get(\"password\").touched);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.registerForm.get(\"password\").hasError(\"required\"));\n        i0.ɵɵadvance(9);\n        i0.ɵɵtextInterpolate1(\"Form value: \", i0.ɵɵpipeBind1(20, 8, ctx.registerForm.value), \"\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\"Form status: \", i0.ɵɵpipeBind1(23, 10, ctx.registerForm.status), \"\");\n      }\n    },\n    directives: [i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.DefaultValueAccessor, i3.NgControlStatus, i3.FormControlName, i4.NgIf],\n    pipes: [i4.JsonPipe],\n    styles: [\"\"]\n  });\n  return RegisterComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}