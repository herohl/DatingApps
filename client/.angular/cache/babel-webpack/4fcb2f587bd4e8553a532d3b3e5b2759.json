{"ast":null,"code":"import { of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let MembersService = /*#__PURE__*/(() => {\n  class MembersService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.apiUrl;\n      this.members = [];\n    } // tslint:disable-next-line: typedef\n\n\n    getMembers() {\n      if (this.members.length > 0) {\n        return of(this.members);\n      }\n\n      return this.http.get(this.baseUrl + 'users').pipe(map(members => {\n        this.members = members;\n        return members;\n      }));\n    } // tslint:disable-next-line: typedef\n\n\n    getMember(username) {\n      const member = this.members.find(x => x.username === username);\n\n      if (member !== undefined) {\n        return of(member);\n      }\n\n      return this.http.get(this.baseUrl + 'users/' + username);\n    } // tslint:disable-next-line: typedef\n\n\n    updateMember(member) {\n      // return this.http.put(this.baseUrl + 'users' + member);\n      return this.http.put(this.baseUrl + 'users', member).pipe(map(() => {\n        const index = this.members.indexOf(member);\n        this.members[index] = member;\n      }));\n    }\n\n  }\n\n  MembersService.ɵfac = function MembersService_Factory(t) {\n    return new (t || MembersService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  MembersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MembersService,\n    factory: MembersService.ɵfac,\n    providedIn: 'root'\n  });\n  return MembersService;\n})();","map":null,"metadata":{},"sourceType":"module"}