{"ast":null,"code":"import { take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/_services/account.service\";\nimport * as i2 from \"src/app/_services/members.service\";\nimport * as i3 from \"ngx-toastr\";\nimport * as i4 from \"@angular/common\";\nconst _c0 = [\"editForm\"];\n\nfunction MemberEditComponent_h1_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h1\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.member.username);\n  }\n}\n\nexport let MemberEditComponent = /*#__PURE__*/(() => {\n  class MemberEditComponent {\n    constructor(accountService, memberService, toastr) {\n      this.accountService = accountService;\n      this.memberService = memberService;\n      this.toastr = toastr;\n      this.accountService.currentUser$.pipe(take(1)).subscribe(user => this.user = user);\n    }\n\n    unloadNotification($event) {\n      if (this.editForm.dirty) {\n        $event.returnValue = true;\n      }\n    }\n\n    ngOnInit() {\n      this.loadMember();\n    }\n\n    loadMember() {\n      this.memberService.getMember(this.user.username).subscribe(member => {\n        this.member = member;\n      });\n    }\n\n    updateMember() {\n      this.memberService.updateMember(this.member).subscribe(() => {\n        this.toastr.success('Profile updated successfully');\n        this.editForm.reset(this.member);\n      });\n    }\n\n  }\n\n  MemberEditComponent.ɵfac = function MemberEditComponent_Factory(t) {\n    return new (t || MemberEditComponent)(i0.ɵɵdirectiveInject(i1.AccountService), i0.ɵɵdirectiveInject(i2.MembersService), i0.ɵɵdirectiveInject(i3.ToastrService));\n  };\n\n  MemberEditComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MemberEditComponent,\n    selectors: [[\"app-member-edit\"]],\n    viewQuery: function MemberEditComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.editForm = _t.first);\n      }\n    },\n    hostBindings: function MemberEditComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"beforeunload\", function MemberEditComponent_beforeunload_HostBindingHandler($event) {\n          return ctx.unloadNotification($event);\n        }, false, i0.ɵɵresolveWindow);\n      }\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"ngIf\"]],\n    template: function MemberEditComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, MemberEditComponent_h1_0_Template, 2, 1, \"h1\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.member);\n      }\n    },\n    directives: [i4.NgIf],\n    styles: [\"\"]\n  });\n  return MemberEditComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}