{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport { getPaginatedResult, getPaginationHeaders } from './paginationHelper';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let MessageService = /*#__PURE__*/(() => {\n  class MessageService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.apiUrl;\n    } // tslint:disable-next-line:typedef\n\n\n    getMessages(pageNumber, pageSize, container) {\n      let params = getPaginationHeaders(pageNumber, pageSize);\n      params = params.append('Container', container); // @ts-ignore\n\n      return getPaginatedResult(this.baseUrl + 'messages', params, this.http);\n    } // tslint:disable-next-line:typedef\n\n\n    getMessageThread(username) {\n      return this.http.get(this.baseUrl + 'messages/thread/' + username);\n    } // tslint:disable-next-line:typedef\n\n\n    sendMessage(username, content) {\n      return this.http.post(this.baseUrl + 'messages', {\n        recipientUsername: username,\n        content\n      });\n    }\n\n  }\n\n  MessageService.ɵfac = function MessageService_Factory(t) {\n    return new (t || MessageService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  MessageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MessageService,\n    factory: MessageService.ɵfac,\n    providedIn: 'root'\n  });\n  return MessageService;\n})();","map":null,"metadata":{},"sourceType":"module"}