{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport { PaginatedResult } from '../_models/pagination';\nimport { UserParams } from '../_models/userparams';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./account.service\";\nexport let MembersService = /*#__PURE__*/(() => {\n  class MembersService {\n    constructor(http, accountService) {\n      this.http = http;\n      this.accountService = accountService;\n      this.baseUrl = environment.apiUrl;\n      this.members = [];\n      this.memberCache = new Map();\n      this.accountService.currentUser$.pipe(take(1)).subscribe(user => {\n        this.user = user;\n        this.userParams = new UserParams(user);\n      });\n    } // tslint:disable-next-line: typedef\n\n\n    getUserParams() {\n      return this.userParams;\n    } // tslint:disable-next-line: typedef\n\n\n    setUserParams(params) {\n      this.userParams = params;\n    } // tslint:disable-next-line: typedef\n\n\n    resetUserParams() {\n      this.userParams = new UserParams(this.user);\n      return this.userParams;\n    } // tslint:disable-next-line: typedef\n\n\n    getMembers(userParams) {\n      // idea to create a key\n      // console.log(Object.values(userParams).join('-'));\n      const response = this.memberCache.get(Object.values(userParams).join('-'));\n\n      if (response) {\n        return of(response);\n      }\n\n      let params = this.getPaginationHeaders(userParams.pageNumber, userParams.pageSize);\n      params = params.append('minAge', userParams.minAge.toString());\n      params = params.append('maxAge', userParams.maxAge.toString());\n      params = params.append('gender', userParams.gender);\n      params = params.append('orderBy', userParams.orderBy);\n      return this.getPaginatedResult(this.baseUrl + 'users', params) // tslint:disable-next-line:no-shadowed-variable\n      .pipe(map(response => {\n        this.memberCache.set(Object.values(userParams).join('-'), response);\n        return response;\n      }));\n    } // tslint:disable-next-line: typedef\n\n\n    getMember(username) {\n      const member = [...this.memberCache.values()].reduce((arr, elem) => arr.concat(elem.result), []) // tslint:disable-next-line:no-shadowed-variable\n      .find(member => member.username === username);\n\n      if (member !== undefined) {\n        return of(member);\n      }\n\n      return this.http.get(this.baseUrl + 'users/' + username);\n    } // tslint:disable-next-line: typedef\n\n\n    updateMember(member) {\n      return this.http.put(this.baseUrl + 'users', member).pipe(map(() => {\n        const index = this.members.indexOf(member);\n        this.members[index] = member;\n      }));\n    } // tslint:disable-next-line: typedef\n\n\n    setMainPhoto(photoId) {\n      return this.http.put(this.baseUrl + 'users/set-main-photo/' + photoId, {});\n    } // tslint:disable-next-line: typedef\n\n\n    deletePhoto(photoId) {\n      return this.http.delete(this.baseUrl + 'users/delete-photo/' + photoId);\n    } // tslint:disable-next-line:typedef\n\n\n    addLike(username) {\n      return this.http.post(this.baseUrl + 'likes/' + username, {});\n    } // tslint:disable-next-line:typedef\n\n\n    getLikes(predicate, pageNumber, pageSize) {\n      let params = this.getPaginationHeaders(pageNumber, pageSize);\n      params = params.append('predicate', predicate);\n      return this.http;\n    } // tslint:disable-next-line: typedef\n\n\n    getPaginatedResult(url, params) {\n      const paginatedResult = new PaginatedResult();\n      return this.http.get(url, {\n        observe: 'response',\n        params\n      }).pipe(map(response => {\n        paginatedResult.result = response.body;\n\n        if (response.headers.get('Pagination') !== null) {\n          paginatedResult.pagination = JSON.parse(response.headers.get('Pagination'));\n        }\n\n        return paginatedResult;\n      }));\n    } // tslint:disable-next-line: typedef\n\n\n    getPaginationHeaders(pageNumber, pageSize) {\n      let params = new HttpParams();\n      params = params.append('pageNumber', pageNumber.toString());\n      params = params.append('pageSize', pageSize.toString());\n      return params;\n    }\n\n  }\n\n  MembersService.ɵfac = function MembersService_Factory(t) {\n    return new (t || MembersService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AccountService));\n  };\n\n  MembersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MembersService,\n    factory: MembersService.ɵfac,\n    providedIn: 'root'\n  });\n  return MembersService;\n})();","map":null,"metadata":{},"sourceType":"module"}